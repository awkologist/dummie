//PFont mono;                           // declare PFont variable

char dna[] = {""};
String[] words = { "A", "C", "G", "T" };

void setup() {
	size(800,40);
	frameRate(1);
	strokeWeight(1);
//	mono = createFont("Mono",14,true); // create Font
	for (i=1; i<=57; i++){
		 String[] char = { "A", "C", "G", "T" };
		 int nucl = int(random(char.length));
		 dna[i] = char[nucl];
		 }
}


void cleaning() {
	fill(#ffffff); // white
	text("C",n,20); text("G",n,20); text("T",n,20); text("A",n,20);	
}

void draw() {

	// Remove the border (on by default)
	// noStroke();
	// fill(#2A6BB7);                         // specify font color 
//	textFont(mono,14);                  // specify font to be used
	background(#ffffff);

	//text("test", 1, 10);
	//println("ttt");
	
	n = 10; h=10;
	for (i=1; i<=dna.length; i=i) {
		n += 10; 
		if (i > dna.length-2) {break;}
		for (c=1; c<=3; c++) {
			if (int(random(50)) == 5) { // mutation
				dna[i] = words[int(random(words.length))];
//				dna[i] = "X";
//				cleaning();
				fill(#FF0000);
				text(dna[i], n, 20);
				}
			else {
				fill(#2A6BB7);                         // specify font color 
				text(dna[i], n, 20);
			}
		if (i % 3 == 0) {
//			20 colors
//			'#e6194b', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4', '#46f0f0', '#f032e6', '#bcf60c', '#fabebe', '#008080', 
//			'#e6beff', '#9a6324', '#fffac8', '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#808080', '#ffffff', '#000000'
			if (match(dna[i-2]+dna[i-1]+dna[i], "(ATG|TAA|TGA|TAG)") != null) {fill(#ffffff); stroke(#ffffff); rect(n-20, 25, 30, h);}
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(GCT|GCC|GCA|GCG)") != null) {fill(#e6194b); stroke(#e6194b); rect(n-20, 25, 30, h);} // Ala
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(CGT|CGC|CGA|CGG|AGA|AGG)") != null) {fill(#911eb4); stroke(#911eb4); rect(n-20, 25, 30, h);} // Arg
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(AAT|AAC)") != null) {fill(#4363d8); stroke(#4363d8); rect(n-20, 25, 30, h);} // Asn
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(GAT|GAC)") != null) {fill(#f58231); stroke(#f58231); rect(n-20, 25, 30, h);} // Asp
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(TGT|TGC)") != null) {fill(#ffe119); stroke(#ffe119); rect(n-20, 25, 30, h);} // Cys
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(CAA|CAG)") != null) {fill(#f032e6); stroke(#f032e6); rect(n-20, 25, 30, h);} // Gln
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(GAA|GAG)") != null) {fill(#bcf60c); stroke(#bcf60c); rect(n-20, 25, 30, h);} // Glt
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(GGT|GGC|GGA|GGG)") != null) {fill(#fabebe); stroke(#fabebe); rect(n-20, 25, 30, h);} // Gly
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(CAT|CAC)") != null) {fill(#008080); stroke(#008080); rect(n-20, 25, 30, h);} // His
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(ATT|ATC|ATA)") != null) {fill(#e6beff); stroke(#e6beff); rect(n-20, 25, 30, h);} // Ile
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(TTA|TTG|CTT|CTC|CTA|CTG)") != null) {fill(#9a6324); stroke(#9a6324); rect(n-20, 25, 30, h);} // Leu
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(AAA|AAG)") != null) {fill(#fffac8); stroke(#fffac8); rect(n-20, 25, 30, h);} // Lys
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(TTT|TTC)") != null) {fill(#800000); stroke(#800000); rect(n-20, 25, 30, h);} // Phe
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(CCT|CCC|CCA|CCG)") != null) {fill(#aaffc3); stroke(#aaffc3); rect(n-20, 25, 30, h);} // Pro
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(TCT|TCC|TCA|TCG|AGT|AGC)") != null) {fill(#808000); stroke(#808000); rect(n-20, 25, 30, h);} // Ser
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(ACT|ACC|ACA|ACG)") != null) {fill(#ffd8b1); stroke(#ffd8b1); rect(n-20, 25, 30, h);} // Thr
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(TAT|TAC)") != null) {fill(#000075); stroke(#000075); rect(n-20, 25, 30, h);} // Tyr
			else if (match(dna[i-2]+dna[i-1]+dna[i], "(GTT|GTC|GTA|GTG)") != null) {fill(#808080); stroke(#808080); rect(n-20, 25, 30, h);} // Val
			else {fill(#000000); stroke(#000000); rect(n-20, 25, 30, h);}
			}
//		if (i % 3 == 0) {text(dna[i-2],n-20,35);}
		i++;
		n += 10;
		}
	}	
}
